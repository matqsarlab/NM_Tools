#!/usr/bin/env python
import argparse
import os

import numpy as np
from Align_two_3D_object import Structure1_translate, Structure2_add_rotate

parser = argparse.ArgumentParser(
    description="""
    Creates an *.xyz files made up of two structures (s1, s2). Automatically rotate and translate objects to each other (`rotation matrix` from 
    quaternions script). Program can be use with flag -all then you direct list with structures 1 (s1) and list with structures 2 (s2) - automatically 
    create main directories -> sub_directories (by structures 1) -> sub_sub_directories (by structures 2) -> *.xyz files with s1 & s2
    Additionally creates file with informations about atoms range in new `*.xyz` structure (`atom_info` file)..
    """,
    epilog="""Example: --> ./make_XYZ.py -s1 dir1/*.xyz -s2 dir2/*.xyz -all,  
    --> ./make_XYZ.py -s1 s1.xyz -s2 s2.xyz""",
)
parser.add_argument(
    "-s1",
    nargs="+",
    help="structures 1 - can be either only one specific structures or path to structures",
)
parser.add_argument(
    "-s2",
    nargs="+",
    help="structures 2 - can be either only one specific structures or path to structures",
)
parser.add_argument(
    "-all",
    action="store_true",
    help="""if active; it works on lists of structures and automatically create directories with sub_directories if not; 
    it based on one structers 1 and one structures 2 then print""",
)

options = parser.parse_args()

if options.all:

    dir = input("Wrpowadz nazwe katalogu lub wcisnij ENTER: ")

    if dir == "":
        dir = "New_XYZ_structers"

    path = str()

    if not os.path.isdir(dir):
        os.mkdir(dir)

    for i in options.s1:
        for j in options.s2:
            obj1 = Structure1_translate(i)
            xyz_obj1 = obj1.translate_center_to_zero

            obj2 = Structure2_add_rotate(i, j)
            xyz_obj2 = obj2.rotate_object
            name = np.append(obj1.get_name, obj2.get_name)

            xyz_str = np.append(xyz_obj1, xyz_obj2, axis=0).round(decimals=4)

            xyz_str = np.array(
                ["{:.5f}".format(line) for line in xyz_str.flatten()]
            ).reshape(xyz_str.shape)

            sub_dir1 = i.split("/")[-1].replace(".xyz", "")
            if not os.path.isdir(os.path.join(dir, sub_dir1)):
                os.mkdir(os.path.join(dir, sub_dir1))
            sub_dir2 = j.split("/")[-1].replace(".xyz", "")
            if not os.path.isdir(os.path.join(dir, sub_dir1, sub_dir2)):
                os.mkdir(os.path.join(dir, sub_dir1, sub_dir2))

            if "/" in i or j:
                path = j.split("/")[-1].replace(".xyz", "") + "_" + i.split("/")[-1]

            with open(os.path.join(dir, sub_dir1, sub_dir2, path), "w") as f:
                f.write(str(len(xyz_str)) + "\n")
                f.write("XYZ file generated by Script\n")
                for coor, n in zip(xyz_str, name):
                    f.write(
                        "{}{:>20}{:>13}{:>13}\n".format(n, coor[0], coor[1], coor[2])
                    )

            with open(os.path.join(dir, sub_dir1, sub_dir2, "atom_info"), "w") as f:
                f.write(
                    """### Informations about range of atoms in *xyz file
### First line  - structer's 1
### Second line - structer's 2\n"""
                )
                f.write(sub_dir1 + f"=1-{len(xyz_obj1)}\n")
                f.write(
                    sub_dir2 + f"={1+len(xyz_obj1)}-{len(xyz_obj1)+len(xyz_obj2)}\n"
                )

            with open(
                os.path.join(dir, sub_dir1, sub_dir2, "dft_info"), "w"
            ) as dft_default:
                dft_default.write(
                    """%NProcShared=8
%mem=16gb
%chk=
#p b3lyp gen SCF=(xqc,Tight,intrep,NoVarAcc,Maxcycle=512) GFInput
     IOp(6/7=3) opt   iop(1/6=100)  symm=loose  int=(grid=ultrafine) scrf=(solvent=water)

test

0 1
---------------------------
4-31G*
****
6-311++G**
****
"""
                )
else:
    try:
        fname1 = options.s1[0]
        fname2 = options.s2[0]
    except:
        print("Can't find arguments -s1, -s2 (*xyz files).")
    else:
        obj1 = Structure1_translate(fname1)
        xyz_obj1 = obj1.translate_center_to_zero

        obj2 = Structure2_add_rotate(fname1, fname2)
        xyz_obj2 = obj2.rotate_object
        name = np.append(obj1.get_name, obj2.get_name)

        xyz_str = np.append(xyz_obj1, xyz_obj2, axis=0).round(decimals=4)

        xyz_str = np.array(
            ["{:.5f}".format(line) for line in xyz_str.flatten()]
        ).reshape(xyz_str.shape)

        print(str(len(xyz_str)))
        print("XYZ file generated by Script")
        for coor, n in zip(xyz_str, name):
            print("{}{:>20}{:>13}{:>13}".format(n, coor[0], coor[1], coor[2]))
